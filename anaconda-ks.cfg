# cat anaconda-ks.cfg 
#version=DEVEL
# System authorization information
auth --useshadow --passalgo=sha512
# Install OS instead of upgrade
install
# Use CDROM installation media
cdrom
# Use text mode install
text
# Firewall configuration
firewall --disabled
firstboot --disable
ignoredisk --only-use=sda,sdb,sdc,sdd
# Keyboard layouts
# old format: keyboard us
# new format:
keyboard --vckeymap=us --xlayouts=''
# System language
lang en_US.UTF-8

# Network information
network  --bootproto=dhcp --device=ens160 --onboot=off --ipv6=auto --no-activate
network  --bootproto=dhcp --device=ens192 --onboot=off --ipv6=auto
network  --hostname=localhost.localdomain
# Reboot after installation
reboot
# Root password
rootpw --iscrypted $6$9MpyUlBPgNuncH09$FL40ntGSKbki6OEuXDo5ycnh1RI3SikEzYdqKXGVVc8uYOlkfzS9zhzfUDFbglGnSdSLjC0uYN6EObKvZRxz9.
# SELinux configuration
selinux --disabled
# System services
services --enabled="chronyd"
# Do not configure the X Window System
skipx
# System timezone
timezone Asia/Shanghai
# System bootloader configuration
bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=sda
# Clear the Master Boot Record
zerombr
# Partition clearing information
clearpart --all --initlabel --drives=sda
# Disk partitioning information
part /boot --fstype="xfs" --ondisk=sda --size=1024
part / --fstype="xfs" --ondisk=sda --size=50175

%pre --logfile=/opt/sds/iso/install.log
#!/bin/sh

plog() { echo '['$(date -u +"%Y-%m-%dT%H:%M:%SZ")']' $@; }

check_parted() {
	local check_drive="$1"
	if parted -s /dev/$check_drive print &>/dev/null ; then
		echo
		echo "$check_drive drive contains partition table:"
		parted -s /dev/$check_drive print
		echo
		read -p "Are you sure you want to erase ALL data on disk $check_drive? (y/N)" confirm_format
		if [[ "$confirm_format" == "y" ]] || [[ "$confirm_format" == "Y" ]] || [[ "$forceformat" == "yes" ]]; then
			return 0
		else
			return 1
		fi
	else
		return 0
	fi
}

target=""
targets=""
target_count=0
drives=""
drv_dir="/sys/block"

tmp="/tmp/drives"
tmp_targets="/tmp/target_drives"
echo "Drive|Size|Model|Vendor" > $tmp
echo "Drive|Size|Model|Vendor" > $tmp_targets

for drv in `ls -1 $drv_dir | grep "sd\|hd\|vd"`; do
	rmable=`cat ${drv_dir}/${drv}/removable`
	if [[ $rmable == 0 ]]; then
		if [[ -z $drives ]]; then
			drives=$drv
		else
			drives="${drives} ${drv}"
		fi
		size=$((`cat ${drv_dir}/${drv}/size`/2**21))
		model=`cat ${drv_dir}/${drv}/device/model`
		vendor=`cat ${drv_dir}/${drv}/device/vendor`
		echo "${drv}|${size}|${model}|${vendor}" >> $tmp
		min=$(( 222 * 9 / 10 ))
		max=$(( 222 * 11 / 10 ))
		if [[ $size -le $max ]] && [[ $size -gt $min ]]; then
			target=$drv
			let target_count++
			if [[ -z $targets ]]; then
				targets=$drv
			else
				targets="${targets} ${drv}"
			fi
			plog "Found available target dirve $drv."
			echo "${drv}|${size}|${model}|${vendor}" >> $tmp_targets
		fi
	fi
done

if [[ -z $drives ]]; then
	rm -f $tmp
	rm -f $tmp_targets
	clear
	echo
	echo '******************************************************************'
	echo '*                           E R R O R                            *'
	echo '*                                                                *'
	echo '*           Not found possible drive for installation.           *'
	echo '*            Please check the storage and try again.             *'
	echo '*                                                                *'
	echo '******************************************************************'
	echo
	read -p "Press Enter to restart: " _
	reboot
fi

if [[ $target_count -gt 1 ]]; then
	exec < /dev/tty3 > /dev/tty3 2>&1
	chvt 3
	clear
	echo
	echo '******************************************************************'
	echo '*                         W A R N I N G                          *'
	echo '*                                                                *'
	echo '*           Found multiple installation target drives.           *'
	echo '*          Please select one from the following drives.          *'
	echo '*                                                                *'
	echo '******************************************************************'
	echo
	echo "Available drives: "
	echo
	awk -F '|' '{ printf "%-7s %-7s %-12s %-s\n", $1, $2, $3, $4} ' $tmp_targets
	echo
	match="no"
	while [[ $match == "no" ]]; do
		read -p "Choose drive from ($targets): " target
		for drv in ${targets[@]}; do
			if [[ $drv == $target ]]; then
				match="yes"
				break
			fi
		done
	done
	chvt 1
fi

if [[ -z $target ]] ; then
	exec < /dev/tty3 > /dev/tty3 2>&1
	chvt 3
	clear
	echo
	echo '******************************************************************'
	echo '*                         W A R N I N G                          *'
	echo '*                                                                *'
	echo '*            No default installation target drive.               *'
	echo '*     Please select one from the following Possible drives.      *'
	echo '*                                                                *'
	echo '******************************************************************'
	echo
	echo "All possible drives: "
	echo
	awk -F '|' '{ printf "%-7s %-7s %-12s %-s\n", $1, $2, $3, $4} ' $tmp
	echo
	match="no"
	while [[ $match == "no" ]]; do
		read -p "Choose drive from ($drives): " target
		for drv in ${drives[@]}; do
			if [[ $drv == $target ]]; then
				match="yes"
				break
			fi
		done
	done
	chvt 1
fi

if [[ "check" == "uncheck" ]]; then
	exec < /dev/tty3 > /dev/tty3 2>&1
	chvt 3
	if ! check_parted $target ; then
		clear
		echo
		echo '******************************************************************'
		echo '*                           E R R O R                            *'
		echo '*                                                                *'
		echo '*           Target disk contains active partition(s).            *'
		echo '*       Installation can not continue without confirmation.      *'
		echo '*                                                                *'
		echo '******************************************************************'
		echo
		read -p "Press Enter to restart: " _
		reboot
	fi
	chvt 1
fi

rm -f $tmp
rm -f $tmp_targets


echo > /tmp/part-include
echo "clearpart --drives=${target} --all --initlabel" >> /tmp/part-include
echo "part /boot --fstype=xfs --ondisk=${target} --size=1024" >> /tmp/part-include
echo "part / --fstype=xfs --ondisk=${target} --size=1 --grow" >> /tmp/part-include

# bootloader --location=mbr --driveorder=sdX
echo "bootloader --append=' crashkernel=auto' --location=mbr --boot-drive=${target}" > /tmp/bootloader-include

plog "End of prepare script."
%end

%post --logfile=/opt/sds/iso/install.log
#!/bin/sh

plog() { echo '['$(date -u +"%Y-%m-%dT%H:%M:%SZ")']' $@; }

hostname_file=/etc/hostname
installer_dir=/opt/xscaler/installer
iso_version_dir=/opt/xscaler
iso_version_file=/opt/xscaler/iso-version
mnt_dir="/tmp_dev"
network_config_dir=/etc/sysconfig/network-scripts

plog "Beginning of post script."
plog "Setting network configs"
cat << EOF > $network_config_dir/ifcfg-bond0
NAME="bond0"
DEVICE=bond0
TYPE="Bond"
BOOTPROTO="static"
BONDING_MASTER="yes"
BONDING_OPTS="mode=active-backup miimon=100 primary=enp103s0f0"
ONBOOT="yes"
PEERDNS="no"
IPV6INIT="no"
NM_CONTROLLED="no"
EOF

cat << EOF > $network_config_dir/ifcfg-enp103s0f0
NAME="enp103s0f0"
DEVICE="enp103s0f0"
TYPE="Ethernet"
ONBOOT="yes"
MASTER="bond0"
SLAVE="yes"
NM_CONTROLLED="no"
EOF

cat << EOF > $network_config_dir/ifcfg-enp103s0f1
NAME="enp103s0f1"
DEVICE="enp103s0f1"
TYPE="Ethernet"
ONBOOT="yes"
MASTER="bond0"
SLAVE="yes"
NM_CONTROLLED="no"
EOF

cat << EOF > $network_config_dir/ifcfg-bond1
NAME="bond1"
DEVICE="bond1"
TYPE="Bond"
BOOTPROTO="static"
BONDING_MASTER="yes"
BONDING_OPTS="mode=active-backup miimon=100 primary=ens1f0"
ONBOOT="yes"
PEERDNS="no"
IPV6INIT="no"
NM_CONTROLLED="no"
EOF

cat << EOF > $network_config_dir/ifcfg-ens1f0
NAME="ens1f0"
DEVICE="ens1f0"
TYPE="Ethernet"
ONBOOT="yes"
MASTER="bond1"
SLAVE="yes"
NM_CONTROLLED="no"
EOF

cat << EOF > $network_config_dir/ifcfg-ens1f1
NAME="ens1f1"
DEVICE="ens1f1"
TYPE="Ethernet"
ONBOOT="yes"
MASTER="bond1"
SLAVE="yes"
NM_CONTROLLED="no"
EOF

cat << EOF > $network_config_dir/ifcfg-enp103s0f2
NAME="enp103s0f2"
DEVICE="enp103s0f2"
BOOTPROTO="static"
IPADDR="192.168.254.1"
PREFIX="24"
ONBOOT="yes"
IPV6INIT="no"
NM_CONTROLLED="no"
EOF

plog "Disable network manager"
systemctl stop NetworkManager
systemctl disable NetworkManager
systemctl enable network

plog "Config grub menuentry"
sed -i "s/CentOS Linux/XSKY SDS OS/g" /boot/grub2/grub.cfg
sed -i "s/7 (Core)/4.1/g" /boot/grub2/grub.cfg

plog "Set /etc/ssh/sshd_config UseDNS to 'no'"
sed -i "s/#UseDNS yes/UseDNS no/g" /etc/ssh/sshd_config

mkdir -p $installer_dir
mkdir -p $iso_version_dir
mkdir -p $mnt_dir

if `test -e /dev/disk/by-label/XSCALER` ; then
	device=/dev/disk/by-label/XSCALER
	plog "Get device by disk label XSCALER."
	plog "Command: mount -o loop $device $mnt_dir"
	mount -o loop $device $mnt_dir
else
	plog "Not get device by label, will use cdrom."
	plog "Command: ln -s /dev/scd0 /dev/cdrom"
	ln -s /dev/scd0 /dev/cdrom
	plog "Command: mount -o loop /dev/cdrom $mnt_dir"
	mount -o loop /dev/cdrom $mnt_dir
fi

plog "Copy installer to $installer_dir."
cp -f $mnt_dir/software/sds-oem-xe-2000-installer-XS_* $installer_dir

plog "Set hostname xscaler."
echo "xscaler" > $hostname_file

plog "Config ISO version."
echo "1.0.000.0" > $iso_version_file

# plog "Config OS release info"
# cp -f $mnt_dir/software/os-release /etc/os-release
# echo "XSKY SDS OS release 4.1" > /etc/centos-release

boa_rpm=boa-1.0.000.0-1.x86_64.rpm
plog "Install rpm ${boa_rpm}"
rpm --quiet -i $mnt_dir/software/${boa_rpm}
sed -i "s/^RootPassword.*$/RootPassword = Password@_/g" /etc/boa.conf
systemctl enable boa

umount $mnt_dir
rm -rf $mnt_dir

plog "End of post script."
%end

%packages
@^infrastructure-server-environment
@base
@compat-libraries
@core
@development
chrony
kexec-tools
kexec-tools

%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end
